const { goals: { GoalBlock }, Movements } = require('mineflayer-pathfinder');

async function drop_all(bot, returnPositionModule) {
  try {
    // Thi·∫øt l·∫≠p movement ƒë·ªÉ kh√¥ng ph√°/ƒë·∫∑t block
    const movements = new Movements(bot);
    movements.allowParkour = false;
    movements.canDig = false;
    movements.placeCost = Infinity;  // Kh√¥ng cho ph√©p ƒë·∫∑t block
    movements.blocksCantBreak.add('*');  // Kh√¥ng cho ph√©p ph√° b·∫•t k·ª≥ block n√†o
    bot.pathfinder.setMovements(movements);

    // D√πng l·ªánh /warp afk
    await bot.chat('/warp afk');
    await new Promise(resolve => setTimeout(resolve, 2000)); // ƒê·ª£i 2 gi√¢y ƒë·ªÉ teleport

    // Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ 5 56 108
    console.log('üß≠ ƒêang di chuy·ªÉn ƒë·∫øn 5 56 108...');
    await bot.pathfinder.goto(new GoalBlock(5, 56, 108));
    console.log('‚úÖ ƒê√£ ƒë·∫øn t·ªça ƒë·ªô 5 56 108');

    // Quay m·∫∑t h∆∞·ªõng -90 0
    await bot.look(-90 * Math.PI / 180, 0);
    console.log('üëÄ ƒê√£ quay m·∫∑t v·ªÅ h∆∞·ªõng yaw=-90¬∞, pitch=0¬∞');

    // D√πng l·ªánh /drop ƒë·ªÉ ƒë∆∞·ª£c ph√©p drop ƒë·ªì
    await bot.chat('/drop');
    console.log('üéØ ƒê√£ k√≠ch ho·∫°t l·ªánh /drop');

    // Theo d√µi chat ƒë·ªÉ ph√°t hi·ªán th√¥ng b√°o d·ªçn d·∫πp
    let shouldStopDropping = false;
    const messageHandler = (message) => {
      const msg = message.toString();
      console.log('üì¢ Nh·∫≠n ƒë∆∞·ª£c message:', msg); // Log ƒë·ªÉ debug

      // Ki·ªÉm tra c·∫£ hai tr∆∞·ªùng h·ª£p: ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng
      if (msg.includes('Nh√¢n vi√™n s·∫Ω qu√©t d·ªçn v·∫≠t ph·∫©m') || 
          msg.toLowerCase().includes('nh√¢n vi√™n s·∫Ω qu√©t d·ªçn v·∫≠t ph·∫©m')) {
        shouldStopDropping = true;
        console.log('‚ö†Ô∏è Ph√°t hi·ªán th√¥ng b√°o d·ªçn d·∫πp, d·ª´ng drop ƒë·ªì!');
        // Th√™m warp v·ªÅ AFK ngay l·∫≠p t·ª©c khi ph√°t hi·ªán th√¥ng b√°o
        bot.chat('/warp afk');
      }
      if (msg.toLowerCase().includes('stop')) {
        shouldStopDropping = true;
        console.log('‚ö†Ô∏è Ph√°t hi·ªán l·ªánh stop, d·ª´ng drop ƒë·ªì!');
      }
    };
    bot.on('message', messageHandler);

    // Drop t·∫•t c·∫£ ƒë·ªì trong inventory
    const inventory = bot.inventory.items();
    for (const item of inventory) {
      if (shouldStopDropping) {
        console.log('üõë D·ª´ng drop do nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu d·ª´ng');
        break;
      }
      try {
        await bot.tossStack(item);
        console.log(`üì¶ ƒê√£ drop ${item.name}`);
        await new Promise(resolve => setTimeout(resolve, 100)); // ƒê·ª£i 0.1 gi√¢y gi·ªØa m·ªói l·∫ßn drop
      } catch (err) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ drop ${item.name}:`, err.message);
      }
    }

    // G·ª° b·ªè event listener ƒë·ªÉ tr√°nh memory leak
    bot.removeListener('message', messageHandler);

    // Warp v·ªÅ khu AFK tr∆∞·ªõc khi quay v·ªÅ v·ªã tr√≠
    console.log('üåÄ ƒêang warp v·ªÅ khu AFK...');
    await bot.chat('/warp afk');
    await new Promise(resolve => setTimeout(resolve, 2000)); // ƒê·ª£i 2 gi√¢y ƒë·ªÉ teleport

    // Quay v·ªÅ v·ªã tr√≠ c·ªßa bot t∆∞∆°ng ·ª©ng
    if (returnPositionModule) {
      console.log(`üîÑ ƒêang quay v·ªÅ v·ªã tr√≠ c·ªßa ${returnPositionModule.name}...`);
      await returnPositionModule(bot);
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ module v·ªã tr√≠ ƒë∆∞·ª£c cung c·∫•p, ·ªü l·∫°i v·ªã tr√≠ hi·ªán t·∫°i');
    }

  } catch (err) {
    console.log('‚ö†Ô∏è L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán drop_all:', err.message);
  }
}

module.exports = drop_all; 