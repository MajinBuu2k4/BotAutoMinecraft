import customtkinter as ctk
import psutil
import subprocess
import os
import webbrowser
import pygetwindow as gw
import time
import threading
import pystray
from PIL import Image, ImageDraw
import sys
import tkinter as tk
from concurrent.futures import ThreadPoolExecutor
import queue
import logging

# ==== C√†i ƒë·∫∑t ====
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

# M√†u s·∫Øc cho logs
LOG_COLORS = {
    "success": "#4CAF50",  # Xanh l√° ƒë·∫≠m
    "error": "#FF5252",    # ƒê·ªè t∆∞∆°i
    "warning": "#FFA726",  # Cam
    "info": "#90CAF9",     # Xanh d∆∞∆°ng nh·∫°t
    "normal": "#E0E0E0",   # X√°m s√°ng
    "time": "#B39DDB",     # T√≠m nh·∫°t
    "bot": "#81C784"       # Xanh l√° nh·∫°t
}

BOT_DIR = r"C:\Users\Administrator\Desktop\BotAutoMinecraft"
BOTS_DIR = os.path.join(BOT_DIR, "bots")
SHORTCUT_DIR = os.path.join(BOT_DIR, "shortcut")
LOG_FILE = os.path.join(BOT_DIR, "watchdog", "watchdog-output.log")
PROGRESS_LOG_FILE = os.path.join(BOT_DIR, "watchdog", "watchdog-progress-output.log")
PS_SCRIPT = os.path.join(BOT_DIR, "watchdog", "watchdog.ps1")
PROGRESS_PS_SCRIPT = os.path.join(BOT_DIR, "watchdog", "watchdog_progress.ps1")
WATCHDOG_SHORTCUT = os.path.join(BOT_DIR, "watchdog", "watchdog_service.lnk")
PROGRESS_SHORTCUT = os.path.join(BOT_DIR, "watchdog", "watchdog_progress_service.lnk")
ICON_PATH = os.path.join(BOT_DIR, "icon.ico")
ERROR_LOG = os.path.join(BOT_DIR, "gui_error.log")

# Th√™m logging cho errors
logging.basicConfig(
    filename=ERROR_LOG,
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Tooltips v√† messages
TOOLTIPS = {
    "run": "Kh·ªüi ƒë·ªông bot",
    "close": "T·∫Øt bot",
    "focus": "T√¨m v√† focus c·ª≠a s·ªï bot",
    "edit": "M·ªü file script ƒë·ªÉ ch·ªânh s·ª≠a",
    "inventory": "M·ªü trang web xem inventory",
    "pause": "T·∫°m d·ª´ng/ti·∫øp t·ª•c ki·ªÉm tra",
    "close_all": "ƒê√≥ng t·∫•t c·∫£ bot"
}

STATUS_COLORS = {
    "online": "#43A047",
    "offline": "#E53935",
    "starting": "#FFA726"
}

class BotManager(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("BotAutoMinecraft Manager")
        self.iconbitmap(ICON_PATH)
        self.geometry("1000x650")
        self.minsize(800, 500)
        
        # CƒÉn gi·ªØa c·ª≠a s·ªï
        self.center_window()

        self.bots = [f"Vanguard{i:02}" for i in range(1, 31)]
        self.widgets = []
        self.bot_start_times = {}
        self.process_cache = {}  # Cache cho processes
        self.cache_timestamp = 0
        self.cache_duration = 2  # Cache 2 gi√¢y
        
        # Th√™m bi·∫øn ki·ªÉm so√°t tr·∫°ng th√°i ki·ªÉm tra
        self.is_checking_paused = False
        
        # Thread pool ƒë·ªÉ x·ª≠ l√Ω c√°c t√°c v·ª• n·∫∑ng
        self.executor = ThreadPoolExecutor(max_workers=4)
        self.update_queue = queue.Queue()
        
        # Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t vi·ªác c·∫≠p nh·∫≠t
        self.is_updating = False
        self.update_counter = 0
        
        self.setup_gui()
        self.draw_bots()
        self.start_update_threads()
        self.refresh_log()
        
        # C·∫≠p nh·∫≠t logs th∆∞·ªùng xuy√™n
        self.after(1000, self.continuous_log_refresh)  # C·∫≠p nh·∫≠t log m·ªói 1 gi√¢y
        self.after(10000, self.auto_refresh_progress)  # Ki·ªÉm tra progress m·ªói 10s
        self.after(120000, self.auto_refresh_watchdog)  # Ki·ªÉm tra log m·ªói 2 ph√∫t

        self.protocol("WM_DELETE_WINDOW", self.hide_to_tray)
        self.create_tray_icon()

    def center_window(self):
        """CƒÉn gi·ªØa c·ª≠a s·ªï tr√™n m√†n h√¨nh"""
        self.update_idletasks()  # C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc th·ª±c c·ªßa c·ª≠a s·ªï
        width = self.winfo_width()
        height = self.winfo_height()
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        self.geometry(f"{width}x{height}+{x}+{y}")

    def setup_gui(self):
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=(10, 0))

        self.scroll_frame = ctk.CTkScrollableFrame(self.main_frame)
        self.scroll_frame.pack(fill="both", expand=True)

        for i in range(8):
            self.scroll_frame.grid_columnconfigure(i, weight=1)

        headers = ["Bot Name", "Inventory", "Status", "Focus", "Run", "Close", "Edit", "Resource"]
        for i, header in enumerate(headers):
            ctk.CTkLabel(self.scroll_frame, text=header, font=("Segoe UI", 14, "bold")).grid(
                row=0, column=i, padx=10, pady=10, sticky="ew"
            )

        # Frame ch·ª©a 2 c·ªôt log
        self.log_frame = ctk.CTkFrame(self)
        self.log_frame.pack(fill="both", expand=False, padx=10, pady=10)
        
        # C·ªôt b√™n tr√°i cho watchdog log
        self.left_frame = ctk.CTkFrame(self.log_frame)
        self.left_frame.pack(side="left", fill="both", expand=True, padx=(0,5))
        
        # Th√™m header ƒë·∫πp h∆°n cho watchdog log
        header_frame = ctk.CTkFrame(self.left_frame, fg_color="#2D3436")
        header_frame.pack(fill="x", pady=(0, 5))
        ctk.CTkLabel(
            header_frame,
            text="üîç Watchdog Log",
            font=("Segoe UI", 14, "bold"),
            text_color="#E0E0E0"
        ).pack(pady=5)
        
        # C·∫•u h√¨nh watchdog log
        self.watchdog_log = ctk.CTkTextbox(
            self.left_frame,
            wrap="word",
            height=200,
            font=("Consolas", 12),
            fg_color="#1E1E1E",
            text_color="#E0E0E0"
        )
        self.watchdog_log.pack(fill="both", expand=True)
        self.watchdog_log.configure(state="disabled")
        
        # C·ªôt b√™n ph·∫£i cho progress log
        self.right_frame = ctk.CTkFrame(self.log_frame)
        self.right_frame.pack(side="right", fill="both", expand=True, padx=(5,0))
        
        # Th√™m header ƒë·∫πp h∆°n cho progress log
        header_frame = ctk.CTkFrame(self.right_frame, fg_color="#2D3436")
        header_frame.pack(fill="x", pady=(0, 5))
        ctk.CTkLabel(
            header_frame,
            text="üìä Progress Log",
            font=("Segoe UI", 14, "bold"),
            text_color="#E0E0E0"
        ).pack(pady=5)
        
        # C·∫•u h√¨nh progress log
        self.progress_log = ctk.CTkTextbox(
            self.right_frame,
            wrap="word",
            height=200,
            font=("Consolas", 12),
            fg_color="#1E1E1E",
            text_color="#E0E0E0"
        )
        self.progress_log.pack(fill="both", expand=True)
        self.progress_log.configure(state="disabled")

        self.btn_frame = ctk.CTkFrame(self)
        self.btn_frame.pack(pady=5)

        self.run_btn = ctk.CTkButton(self.btn_frame, text="‚ñ∂ Ch·∫°y Watchdog", command=self.run_watchdog)
        self.run_btn.pack(side="left", padx=10)

        self.refresh_btn = ctk.CTkButton(self.btn_frame, text="üîÑ L√†m m·ªõi log", command=self.refresh_all_logs)
        self.refresh_btn.pack(side="left", padx=10)

        # Th√™m n√∫t t·∫°m d·ª´ng ki·ªÉm tra
        self.pause_btn = ctk.CTkButton(
            self.btn_frame, 
            text="‚è∏ T·∫°m d·ª´ng ki·ªÉm tra", 
            command=self.pause_checking,
            fg_color="#FFA726",
            hover_color="#FB8C00"
        )
        self.pause_btn.pack(side="left", padx=10)
        self.bind_tooltip(self.pause_btn, TOOLTIPS["pause"])

        # Th√™m n√∫t ƒë√≥ng t·∫•t c·∫£ bot
        self.close_all_btn = ctk.CTkButton(
            self.btn_frame, 
            text="‚úñ ƒê√≥ng t·∫•t c·∫£", 
            command=self.close_all_bots,
            fg_color="#E53935",
            hover_color="#C62828"
        )
        self.close_all_btn.pack(side="left", padx=10)
        self.bind_tooltip(self.close_all_btn, TOOLTIPS["close_all"])

    def draw_bots(self):
        for i, bot in enumerate(self.bots):
            port = 3000 + i + 1
            row = i + 1

            status_var = ctk.StringVar()
            resource_var = ctk.StringVar()

            status_label = ctk.CTkLabel(self.scroll_frame, textvariable=status_var, font=("Segoe UI", 12, "bold"))
            resource_label = ctk.CTkLabel(self.scroll_frame, textvariable=resource_var, font=("Segoe UI", 12))

            # Th√™m tooltips cho c√°c n√∫t
            inv_btn = self.create_button(self.scroll_frame, f"{port}", 60, 
                                       lambda p=port: webbrowser.open(f"http://localhost:{p}"),
                                       tooltip=TOOLTIPS["inventory"])
            
            run_btn = self.create_button(self.scroll_frame, "‚ñ∂", 40,
                                       lambda b=bot: self.run_bot_async(b),
                                       tooltip=TOOLTIPS["run"])
            
            close_btn = self.create_button(self.scroll_frame, "‚úñ", 40,
                                         lambda b=bot: self.close_bot_async(b),
                                         fg_color="red", hover_color="#a00",
                                         tooltip=TOOLTIPS["close"])
            
            focus_btn = self.create_button(self.scroll_frame, "üîç", 40,
                                         lambda b=bot: self.focus_bot_async(b),
                                         tooltip=TOOLTIPS["focus"])
            
            edit_btn = self.create_button(self.scroll_frame, "‚úè", 40,
                                        lambda b=bot: self.edit_bot(b),
                                        fg_color="#FFA726",
                                        tooltip=TOOLTIPS["edit"])

            ctk.CTkLabel(self.scroll_frame, text=bot).grid(row=row, column=0, padx=5, pady=4, sticky="ew")
            inv_btn.grid(row=row, column=1, padx=5, sticky="ew")
            status_label.grid(row=row, column=2, padx=5, sticky="ew")
            focus_btn.grid(row=row, column=3, padx=5, sticky="ew")
            run_btn.grid(row=row, column=4, padx=5, sticky="ew")
            close_btn.grid(row=row, column=5, padx=5, sticky="ew")
            edit_btn.grid(row=row, column=6, padx=5, sticky="ew")
            resource_label.grid(row=row, column=7, padx=5, sticky="ew")

            self.widgets.append({
                "name": bot,
                "status_var": status_var,
                "status_label": status_label,
                "run_btn": run_btn,
                "resource_var": resource_var
            })

    def create_button(self, parent, text, width, command, tooltip="", **kwargs):
        """Helper function to create buttons with tooltips"""
        btn = ctk.CTkButton(parent, text=text, width=width, command=command, **kwargs)
        
        if tooltip:
            self.bind_tooltip(btn, tooltip)
        
        return btn

    def bind_tooltip(self, widget, text):
        """Create tooltip for a widget"""
        tooltip = None
        
        def enter(event):
            nonlocal tooltip
            x, y, _, _ = widget.bbox("insert")
            x += widget.winfo_rootx() + 25
            y += widget.winfo_rooty() + 20

            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{x}+{y}")

            label = tk.Label(tooltip, text=text, justify='left',
                            background="#2B2B2B", foreground="white",
                            relief='solid', borderwidth=1,
                            font=("Segoe UI", "8", "normal"))
            label.pack()

        def leave(event):
            nonlocal tooltip
            if tooltip:
                tooltip.destroy()
                tooltip = None

        widget.bind('<Enter>', enter)
        widget.bind('<Leave>', leave)

    def get_all_processes_cached(self):
        """L·∫•y t·∫•t c·∫£ processes v·ªõi cache ƒë·ªÉ gi·∫£m lag"""
        current_time = time.time()
        
        if current_time - self.cache_timestamp > self.cache_duration:
            try:
                # Ch·ªâ l·∫•y c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt
                processes = {}
                for proc in psutil.process_iter(['pid', 'name', 'create_time']):
                    try:
                        name = proc.info['name'].lower()
                        if name.startswith('vanguard') and name.endswith('.exe'):
                            processes[name] = proc
                    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                        continue
                
                self.process_cache = processes
                self.cache_timestamp = current_time
            except Exception:
                pass
        
        return self.process_cache

    def get_process_info(self, bot_name):
        """L·∫•y th√¥ng tin process v·ªõi cache theo th·ªùi gian"""
        processes = self.get_all_processes_cached()
        process_name = f"{bot_name.lower()}.exe"
        
        if process_name in processes:
            try:
                proc = processes[process_name]
                if proc.is_running():
                    create_time = proc.create_time()
                    runtime = time.time() - create_time
                    
                    # Cache CPU/RAM trong 5 gi√¢y
                    current_time = time.time()
                    if not hasattr(proc, '_last_resource_check') or \
                       current_time - proc._last_resource_check > 5:
                        try:
                            cpu = proc.cpu_percent()
                            mem = proc.memory_info().rss / (1024 * 1024)
                            proc._cached_cpu = cpu
                            proc._cached_mem = mem
                            proc._last_resource_check = current_time
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            cpu = 0
                            mem = 0
                    else:
                        cpu = getattr(proc, '_cached_cpu', 0)
                        mem = getattr(proc, '_cached_mem', 0)
                    
                    return {
                        'online': True,
                        'runtime': runtime,
                        'cpu': cpu,
                        'memory': mem,
                        'create_time': create_time
                    }
            except Exception as e:
                logging.error(f"Error getting process info for {bot_name}: {str(e)}")
                if process_name in self.process_cache:
                    del self.process_cache[process_name]
        
        return {'online': False}

    def update_bot_status_background(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i bot trong background thread"""
        while True:
            try:
                if not self.is_updating:
                    self.is_updating = True
                    updates = []
                    
                    for bot in self.widgets:
                        name = bot["name"]
                        info = self.get_process_info(name)
                        updates.append((bot, info))
                    
                    # ƒê∆∞a updates v√†o queue ƒë·ªÉ main thread x·ª≠ l√Ω
                    self.update_queue.put(updates)
                    self.is_updating = False
                    
                time.sleep(3)  # C·∫≠p nh·∫≠t m·ªói 3 gi√¢y
            except Exception:
                self.is_updating = False
                time.sleep(5)

    def process_updates_from_queue(self):
        """X·ª≠ l√Ω updates t·ª´ queue trong main thread"""
        try:
            while not self.update_queue.empty():
                updates = self.update_queue.get_nowait()
                
                for bot_widget, info in updates:
                    name = bot_widget["name"]
                    
                    if info['online']:
                        create_time = info['create_time']
                        
                        if name not in self.bot_start_times:
                            self.bot_start_times[name] = create_time
                        
                        runtime_str = self.format_runtime(info['runtime'])
                        
                        bot_widget["status_var"].set("Online")
                        bot_widget["status_label"].configure(text_color="#43A047")
                        bot_widget["run_btn"].configure(fg_color="#66BB6A", hover_color="#558B2F")
                        bot_widget["resource_var"].set(
                            f"CPU: {info['cpu']:.1f}% | RAM: {info['memory']:.1f}MB | Runtime: {runtime_str}"
                        )
                    else:
                        if name in self.bot_start_times:
                            del self.bot_start_times[name]
                        
                        bot_widget["status_var"].set("Offline")
                        bot_widget["status_label"].configure(text_color="#E53935")
                        bot_widget["run_btn"].configure(fg_color="#FFCA28", hover_color="#FDD835")
                        bot_widget["resource_var"].set("CPU: 0.0% | RAM: 0.0MB | Runtime: --")
                
                self.update_counter += 1
                
        except queue.Empty:
            pass
        except Exception:
            pass
        
        # L√™n l·ªãch cho l·∫ßn ki·ªÉm tra ti·∫øp theo
        self.after(500, self.process_updates_from_queue)

    def start_update_threads(self):
        """Kh·ªüi ƒë·ªông c√°c thread c·∫≠p nh·∫≠t"""
        # Thread c·∫≠p nh·∫≠t tr·∫°ng th√°i bot
        update_thread = threading.Thread(target=self.update_bot_status_background, daemon=True)
        update_thread.start()
        
        # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω queue updates
        self.after(1000, self.process_updates_from_queue)

    def format_runtime(self, seconds):
        """Chuy·ªÉn ƒë·ªïi seconds th√†nh ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc"""
        if seconds < 60:
            return f"{int(seconds)}s"
        elif seconds < 3600:
            minutes = int(seconds // 60)
            secs = int(seconds % 60)
            return f"{minutes}m {secs}s"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}h {minutes}m"

    def run_bot_async(self, bot_name):
        """Ch·∫°y bot trong thread ri√™ng"""
        self.executor.submit(self.run_bot, bot_name)

    def run_bot(self, bot_name):
        shortcut_path = os.path.join(SHORTCUT_DIR, f"{bot_name}.lnk")
        
        if os.path.exists(shortcut_path):
            try:
                subprocess.Popen(
                    ["cmd", "/c", "start", "", shortcut_path],
                    shell=True,
                    creationflags=subprocess.CREATE_NEW_CONSOLE if sys.platform == "win32" else 0
                )
                self.after(0, lambda: self.popup_message(f"ƒê√£ kh·ªüi ƒë·ªông {bot_name}", "#43A047"))
            except Exception as e:
                self.after(0, lambda: self.popup_message(f"L·ªói kh·ªüi ƒë·ªông {bot_name}: {str(e)}", "red"))
        else:
            self.after(0, lambda: self.popup_message(f"Kh√¥ng t√¨m th·∫•y shortcut {bot_name}.lnk!", "red"))

    def close_bot_async(self, bot_name):
        """ƒê√≥ng bot trong thread ri√™ng"""
        self.executor.submit(self.close_bot, bot_name)

    def close_bot(self, bot_name):
        try:
            subprocess.run(f"taskkill /f /im {bot_name}.exe", shell=True, capture_output=True)
            # X√≥a kh·ªèi cache ngay l·∫≠p t·ª©c
            process_name = f"{bot_name.lower()}.exe"
            if process_name in self.process_cache:
                del self.process_cache[process_name]
        except Exception as e:
            self.after(0, lambda: self.popup_message(f"L·ªói ƒë√≥ng {bot_name}: {str(e)}", "red"))

    def focus_bot_async(self, bot_name):
        """Focus bot trong thread ri√™ng"""
        self.executor.submit(self.focus_bot, bot_name)

    def focus_bot(self, bot_name):
        try:
            windows = gw.getWindowsWithTitle(bot_name)
            for win in windows:
                if bot_name in win.title:
                    time.sleep(0.1)
                    win.restore()
                    win.activate()
                    return
            self.after(0, lambda: self.popup_message(f"Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï {bot_name}", "#FFA500"))
        except Exception as e:
            self.after(0, lambda: self.popup_message(f"L·ªói: {str(e)}", "red"))

    def edit_bot(self, bot):
        js_file = os.path.join(BOTS_DIR, f"{bot}.js")
        if os.path.exists(js_file):
            subprocess.Popen(f'subl "{js_file}"', shell=True)
        else:
            self.popup_message("Kh√¥ng t√¨m th·∫•y file ƒë·ªÉ m·ªü.", "red")

    def popup_message(self, text, color="red"):
        popup = ctk.CTkToplevel(self)
        popup.geometry("300x60+100+100")
        popup.overrideredirect(True)
        popup.configure(fg_color=color)
        label = ctk.CTkLabel(popup, text=text, text_color="white")
        label.pack(pady=15)
        popup.after(2000, popup.destroy)

    def run_watchdog(self):
        def task():
            try:
                if os.path.exists(LOG_FILE):
                    os.remove(LOG_FILE)
                # S·ª≠ d·ª•ng shortcut thay v√¨ ch·∫°y tr·ª±c ti·∫øp
                subprocess.Popen(
                    ["cmd", "/c", "start", "", WATCHDOG_SHORTCUT],
                    shell=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
            except Exception as e:
                self.after(0, lambda: self.append_to_log(f"L·ªói: {e}", is_error=True))
            finally:
                self.after(0, self.refresh_log)

        self.executor.submit(task)

    def refresh_all_logs(self):
        """L√†m m·ªõi c·∫£ 2 lo·∫°i log"""
        self.refresh_log()
        self.refresh_progress_log()

    def continuous_log_refresh(self):
        """Li√™n t·ª•c c·∫≠p nh·∫≠t n·ªôi dung c·ªßa c·∫£ hai log"""
        if not self.is_checking_paused:
            self.refresh_log()
            self.refresh_progress_log()
        self.after(1000, self.continuous_log_refresh)  # L·∫≠p l·ªãch cho l·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo

    def refresh_log(self):
        """ƒê·ªçc v√† c·∫≠p nh·∫≠t watchdog log"""
        def load_log():
            if os.path.exists(LOG_FILE):
                try:
                    with open(LOG_FILE, "r", encoding="utf-8") as f:
                        return f.readlines()
                except Exception as e:
                    logging.error(f"Error reading watchdog log: {str(e)}")
                    return [f"L·ªói ƒë·ªçc watchdog log file: {str(e)}\n"]
            return []

        def update_log_display(content):
            self.watchdog_log.configure(state="normal")
            current_content = self.watchdog_log.get("1.0", "end-1c")
            new_content = "".join(content)
            
            # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu n·ªôi dung thay ƒë·ªïi
            if current_content != new_content:
                self.watchdog_log.delete("1.0", "end")
                for line in content:
                    # T√°ch timestamp v√† n·ªôi dung
                    parts = line.split("]", 1) if "]" in line else ["", line]
                    if len(parts) == 2:
                        timestamp = parts[0] + "]"
                        message = parts[1]
                        
                        # Th√™m timestamp v·ªõi m√†u ri√™ng
                        self.watchdog_log.insert("end", timestamp, "time")
                        
                        # X√°c ƒë·ªãnh tag cho ph·∫ßn n·ªôi dung
                        if "OK" in message:
                            tag = "success"
                        elif "Error" in message or "Exception" in message:
                            tag = "error"
                        elif "kh·ªüi ƒë·ªông" in message:
                            tag = "warning"
                        else:
                            tag = "normal"
                        
                        # Th√™m n·ªôi dung v·ªõi m√†u t∆∞∆°ng ·ª©ng
                        self.watchdog_log.insert("end", message, tag)
                    else:
                        self.watchdog_log.insert("end", line, "normal")
                
                # C·∫•u h√¨nh m√†u cho c√°c tag
                self.watchdog_log.tag_config("time", foreground=LOG_COLORS["time"])
                self.watchdog_log.tag_config("success", foreground=LOG_COLORS["success"])
                self.watchdog_log.tag_config("error", foreground=LOG_COLORS["error"])
                self.watchdog_log.tag_config("warning", foreground=LOG_COLORS["warning"])
                self.watchdog_log.tag_config("normal", foreground=LOG_COLORS["normal"])
                
                # Cu·ªôn xu·ªëng cu·ªëi
                self.watchdog_log.see("end")
            
            self.watchdog_log.configure(state="disabled")

        try:
            content = load_log()
            self.after(0, lambda: update_log_display(content))
        except Exception as e:
            logging.error(f"Error in refresh_log: {str(e)}")

    def append_to_log(self, text, is_error=False):
        """Th√™m text v√†o c·∫£ 2 log box"""
        tag = "red" if is_error else "green"
        
        self.watchdog_log.configure(state="normal")
        self.watchdog_log.insert("end", text + "\n", tag)
        self.watchdog_log.configure(state="disabled")
        
        self.progress_log.configure(state="normal")
        self.progress_log.insert("end", text + "\n", tag)
        self.progress_log.configure(state="disabled")

    def auto_refresh_watchdog(self):
        """T·ª± ƒë·ªông ch·∫°y watchdog.ps1 m·ªói 2 ph√∫t"""
        if not self.is_checking_paused:
            self.run_watchdog()
        self.after(120000, self.auto_refresh_watchdog)

    def hide_to_tray(self):
        self.withdraw()

    def create_tray_icon(self):
        if os.path.exists(ICON_PATH):
            image = Image.open(ICON_PATH)
        else:
            image = Image.new("RGB", (64, 64), color="green")
            draw = ImageDraw.Draw(image)
            draw.rectangle((0, 0, 64, 64), fill="green")
            draw.text((10, 20), "Bot", fill="white")

        self.tray_icon = pystray.Icon("BotManager", image, "BotAutoMinecraft", menu=pystray.Menu(
            pystray.MenuItem("M·ªü giao di·ªán", lambda: self.show_window()),
            pystray.MenuItem("Tho√°t", lambda: self.quit_app())
        ))

        threading.Thread(target=self.tray_icon.run, daemon=True).start()

    def show_window(self):
        self.after(0, self.deiconify)

    def quit_app(self):
        self.executor.shutdown(wait=False)
        self.tray_icon.stop()
        self.destroy()

    def auto_refresh_progress(self):
        """T·ª± ƒë·ªông ch·∫°y watchdog_progress.ps1 m·ªói 10 gi√¢y"""
        if not self.is_checking_paused:
            def task():
                try:
                    if os.path.exists(PROGRESS_LOG_FILE):
                        os.remove(PROGRESS_LOG_FILE)
                    # S·ª≠ d·ª•ng shortcut thay v√¨ ch·∫°y tr·ª±c ti·∫øp
                    subprocess.Popen(
                        ["cmd", "/c", "start", "", PROGRESS_SHORTCUT],
                        shell=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                except Exception as e:
                    self.after(0, lambda: self.append_to_log(f"L·ªói ki·ªÉm tra progress: {e}", is_error=True))
                finally:
                    self.after(0, self.refresh_progress_log)

            self.executor.submit(task)
        self.after(10000, self.auto_refresh_progress)

    def refresh_progress_log(self):
        """ƒê·ªçc v√† c·∫≠p nh·∫≠t progress log"""
        def load_log():
            if os.path.exists(PROGRESS_LOG_FILE):
                try:
                    with open(PROGRESS_LOG_FILE, "r", encoding="utf-8") as f:
                        return f.readlines()
                except Exception as e:
                    logging.error(f"Error reading progress log: {str(e)}")
                    return [f"L·ªói ƒë·ªçc progress log file: {str(e)}\n"]
            return []

        def update_progress_display(content):
            self.progress_log.configure(state="normal")
            current_content = self.progress_log.get("1.0", "end-1c")
            new_content = "".join(content)
            
            # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu n·ªôi dung thay ƒë·ªïi
            if current_content != new_content:
                self.progress_log.delete("1.0", "end")
                for line in content:
                    # T√°ch ph·∫ßn bot name v√† tr·∫°ng th√°i
                    if "[" in line and "]" in line:
                        bot_start = line.find("[")
                        bot_end = line.find("]", bot_start) + 1
                        bot_name = line[bot_start:bot_end]
                        rest_of_line = line[bot_end:]
                        
                        # Th√™m t√™n bot v·ªõi m√†u ri√™ng
                        self.progress_log.insert("end", bot_name, "bot")
                        
                        # X√°c ƒë·ªãnh tag cho ph·∫ßn tr·∫°ng th√°i
                        if "‚úÖ" in rest_of_line:
                            tag = "success"
                        elif "‚ùå" in rest_of_line:
                            tag = "error"
                        elif "üõ†" in rest_of_line:
                            tag = "warning"
                        else:
                            tag = "info"
                        
                        # Th√™m ph·∫ßn c√≤n l·∫°i v·ªõi m√†u t∆∞∆°ng ·ª©ng
                        self.progress_log.insert("end", rest_of_line, tag)
                    else:
                        self.progress_log.insert("end", line, "normal")
                
                # C·∫•u h√¨nh m√†u cho c√°c tag
                self.progress_log.tag_config("bot", foreground=LOG_COLORS["bot"])
                self.progress_log.tag_config("success", foreground=LOG_COLORS["success"])
                self.progress_log.tag_config("error", foreground=LOG_COLORS["error"])
                self.progress_log.tag_config("warning", foreground=LOG_COLORS["warning"])
                self.progress_log.tag_config("info", foreground=LOG_COLORS["info"])
                self.progress_log.tag_config("normal", foreground=LOG_COLORS["normal"])
                
                # Cu·ªôn xu·ªëng cu·ªëi
                self.progress_log.see("end")
            
            self.progress_log.configure(state="disabled")

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i bot trong grid
            for line in content:
                for widget in self.widgets:
                    if widget["name"] in line:
                        if "OK" in line:
                            widget["status_var"].set("Online")
                            widget["status_label"].configure(text_color=STATUS_COLORS["online"])
                        elif "kh·ªüi ƒë·ªông" in line:
                            widget["status_var"].set("Starting...")
                            widget["status_label"].configure(text_color=STATUS_COLORS["starting"])
                        else:
                            widget["status_var"].set("Offline")
                            widget["status_label"].configure(text_color=STATUS_COLORS["offline"])

        try:
            content = load_log()
            self.after(0, lambda: update_progress_display(content))
        except Exception as e:
            logging.error(f"Error in refresh_progress_log: {str(e)}")

    def pause_checking(self):
        """T·∫°m d·ª´ng/ti·∫øp t·ª•c ki·ªÉm tra"""
        self.is_checking_paused = not self.is_checking_paused
        if self.is_checking_paused:
            self.pause_btn.configure(text="‚ñ∂ Ti·∫øp t·ª•c ki·ªÉm tra", fg_color="#43A047", hover_color="#2E7D32")
            self.append_to_log("ƒê√£ t·∫°m d·ª´ng ki·ªÉm tra")
        else:
            self.pause_btn.configure(text="‚è∏ T·∫°m d·ª´ng ki·ªÉm tra", fg_color="#FFA726", hover_color="#FB8C00")
            self.append_to_log("ƒê√£ ti·∫øp t·ª•c ki·ªÉm tra")
            # K√≠ch ho·∫°t ki·ªÉm tra ngay l·∫≠p t·ª©c
            self.refresh_all_logs()

    def close_all_bots(self):
        """ƒê√≥ng t·∫•t c·∫£ bot"""
        def task():
            try:
                for bot in self.bots:
                    self.close_bot(bot)
                    time.sleep(0.1)  # Tr√°nh qu√° t·∫£i h·ªá th·ªëng
                self.after(0, lambda: self.append_to_log("ƒê√£ ƒë√≥ng t·∫•t c·∫£ bot"))
            except Exception as e:
                self.after(0, lambda: self.append_to_log(f"L·ªói ƒë√≥ng t·∫•t c·∫£ bot: {str(e)}", is_error=True))

        self.executor.submit(task)

if __name__ == "__main__":
    app = BotManager()
    app.mainloop()